// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "error_code.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocols {
namespace common {

namespace {

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BuddyErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ItemErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LineupErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ArenaErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TeamErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FightErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FriendErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GuildErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GiftErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LivenessErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ConfigErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* InstanceErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PassTeamErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BuddySoulErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CampErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChargeActivityErrorCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_error_5fcode_2eproto() {
  protobuf_AddDesc_error_5fcode_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "error_code.proto");
  GOOGLE_CHECK(file != NULL);
  ErrorCode_descriptor_ = file->enum_type(0);
  BuddyErrorCode_descriptor_ = file->enum_type(1);
  SkillErrorCode_descriptor_ = file->enum_type(2);
  ItemErrorCode_descriptor_ = file->enum_type(3);
  LineupErrorCode_descriptor_ = file->enum_type(4);
  ArenaErrorCode_descriptor_ = file->enum_type(5);
  QuestErrorCode_descriptor_ = file->enum_type(6);
  TeamErrorCode_descriptor_ = file->enum_type(7);
  FightErrorCode_descriptor_ = file->enum_type(8);
  ChatErrorCode_descriptor_ = file->enum_type(9);
  FriendErrorCode_descriptor_ = file->enum_type(10);
  GuildErrorCode_descriptor_ = file->enum_type(11);
  GiftErrorCode_descriptor_ = file->enum_type(12);
  LivenessErrorCode_descriptor_ = file->enum_type(13);
  ConfigErrorCode_descriptor_ = file->enum_type(14);
  InstanceErrorCode_descriptor_ = file->enum_type(15);
  PassTeamErrorCode_descriptor_ = file->enum_type(16);
  BuddySoulErrorCode_descriptor_ = file->enum_type(17);
  CampErrorCode_descriptor_ = file->enum_type(18);
  ChargeActivityErrorCode_descriptor_ = file->enum_type(19);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_error_5fcode_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_error_5fcode_2eproto() {
}

void protobuf_AddDesc_error_5fcode_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020error_code.proto\022\020protocols.common*\201\013\n"
    "\tErrorCode\022\016\n\nEC_SUCCESS\020\000\022\026\n\022EC_INVALID"
    "_REQUEST\020\001\022\022\n\016EC_ACTION_DENY\020\002\022\021\n\rEC_DAT"
    "A_ERROR\020\003\022\027\n\023EC_INVALID_ARGUMENT\020\004\022\"\n\036EC"
    "_DISCONNECT_BY_ANOTHER_LOGIN\020\005\022\032\n\026EC_SER"
    "VER_IS_SHUT_DOWN\020\006\022\024\n\020EC_PLAYER_BANNED\020\007"
    "\022\027\n\023EC_USER_ID_EXHAUSED\020\010\022\023\n\017EC_INVALID_"
    "NAME\020\t\022\034\n\030EC_NAME_LENGTH_TOO_SHORT\020\n\022\033\n\027"
    "EC_NAME_LENGTH_TOO_LONG\020!\022\"\n\036EC_NAME_WIT"
    "H_INVALID_CHARACTER\020\013\022\021\n\rEC_NAME_EXIST\020\014"
    "\022\036\n\032EC_CONDITION_NOT_SATISFIED\020\r\022\031\n\025EC_P"
    "ROFESSION_INVALID\020\016\022\026\n\022EC_NO_ENOUGH_MONE"
    "Y\020\017\022\030\n\024EC_NO_ENOUGH_DIAMOND\020\020\022\022\n\016EC_LEVE"
    "L_LIMIT\020\021\022\023\n\017EC_NUMBER_LIMIT\020\022\022\031\n\025EC_TIM"
    "E_NOT_SATISFIED\020\023\022\023\n\017EC_PLAYER_EXIST\020\024\022\027"
    "\n\023EC_PLAYER_NOT_EXIST\020\025\022\026\n\022EC_STILL_COOL"
    "_DOWN\020\026\022\027\n\023EC_CONFIG_NOT_FOUND\020\027\022\032\n\026EC_D"
    "AILY_GIFT_ACCEPTED\020\030\022\025\n\021EC_PLAYER_OFFLIN"
    "E\020\031\022\036\n\032EC_CREATE_PLAYER_NAME_USED\020\032\022\035\n\031E"
    "C_PLAYER_FLAG_ALREAD_SET\020\033\022\024\n\020EC_NPC_NOT"
    "_FOUND\020\034\022!\n\035EC_ENTER_INSTANCE_COUNT_LIMI"
    "T\020\035\022\023\n\017EC_SERVER_ERROR\020\036\022\025\n\021EC_FUNCTION_"
    "LIMIT\020\037\022\027\n\023EC_NO_ENOUGH_COUPON\020 \022,\n(EC_N"
    "O_ENOUGH_MONSTER_EXP_BUFF_TIMES_LEFT\020\"\022\034"
    "\n\030EC_DAILY_LIMIT_CANT_FIND\020#\022!\n\035EC_DAILY"
    "_HUNT_LIMIT_CANT_FIND\020$\022\033\n\027EC_CANT_FIND_"
    "FIGHT_DATA\020%\022\027\n\023EC_SAVE_FIGHT_ERROR\020&\022\033\n"
    "\027EC_NPC_CONFIG_NOT_FOUND\020\'\022\034\n\030EC_NPC_TOO"
    "_LONG_DISTANCE\020(\022\024\n\020EC_PLAYER_FREEZE\020)\022\031"
    "\n\025EC_PHY_STR_NOT_ENOUGH\020*\022\016\n\nEC_NOT_VIP\020"
    "+\022\026\n\022EC_VIP_LEVEL_LIMIT\020,\022\027\n\023EC_NOT_ENOU"
    "GH_YOULI\020-\022\025\n\021EC_PLAYER_IS_DEAD\020.\022\025\n\021EC_"
    "CONFIG_INVALID\020/\022\030\n\024EC_NEW_MEMORY_FAILED"
    "\0200\022\024\n\020EC_SCORE_IS_FULL\0201\022 \n\034EC_MEMBER_NO"
    "_ENOUGHT_DIAMOND\0202\022 \n\034EC_ROLE_ID_NOT_ALL"
    "OC_CORRECT\0203\022\"\n\036EC_PLAYER_LOGIN_STATUS_I"
    "NVALID\0204*\375\010\n\016BuddyErrorCode\022\025\n\021EC_YINGLI"
    "NG_EXIST\020e\022\031\n\025EC_YINGLING_NOT_EXIST\020f\022\033\n"
    "\027EC_CREATE_YINGLING_FAIL\020g\022\030\n\024EC_NOT_HAV"
    "E_YINGLING\020h\022!\n\035EC_YINGLING_NOT_EXIST_ON"
    "_FIRE\020i\022\036\n\032EC_YINGLING_NO_FIRE_MYSELF\020j\022"
    "\033\n\027EC_YINGLING_SLOT_OPENED\020k\022#\n\037EC_YINGL"
    "ING_ILLEGAL_HIRING_SLOT\020l\022 \n\034EC_YINGLING"
    "_ILLEGAL_HIRE_POS\020m\022\031\n\025EC_YINGLING_ON_LI"
    "NEUP\020n\022\035\n\031EC_YINGLING_ALREADY_HIRED\020o\022&\n"
    "\"EC_YINGLING_HIRE_NOT_ENOUGH_LINGLI\020p\022\'\n"
    "#EC_YINGLING_NO_CHALLENGE_SPACE_TIME\020q\022\034"
    "\n\030EC_YINGLING_ILLEGAL_SLOT\020r\022\"\n\036EC_YINGL"
    "ING_HIRE_REACH_MAX_NUM\020s\022\037\n\033EC_YINGLING_"
    "SLOT_OPENED_MAX\020t\022\"\n\036EC_YINGLING_HIRING_"
    "SLOT_OPENED\020u\022&\n\"EC_YINGLING_NO_FIRE_WIT"
    "H_EQUIPMENT\020v\022+\n\'EC_YINGLING_NO_FIRE_WIT"
    "H_PRACTICE_SKILL\020w\022\035\n\031EC_YINGLING_NO_SOU"
    "L_STONE\020x\022%\n!EC_YINGLING_NOT_ENOUGH_SOUL"
    "_STONE\020y\022\036\n\032EC_YINGLING_NO_FOUND_BUDDY\020z"
    "\022\036\n\032EC_YINGLING_REACH_MAX_SOUL\020{\022\037\n\033EC_Y"
    "INGLING_NOT_ENOUGH_COIN\020|\022#\n\037EC_YINGLING"
    "_REACH_MAX_SPACETIME\020}\022\'\n#EC_YINGLING_NO"
    "T_LINEUP_ON_CHALLENGE\020~\022\037\n\033EC_YINGLING_N"
    "O_PROTECT_ITEM\020\177\022%\n EC_YINGLING_NO_CHALL"
    "ENGE_IN_TEAM\020\200\001\022*\n%EC_YINGLING_CHALLENGE"
    "_STILL_COOL_DOWN\020\201\001\022$\n\037EC_YINGLING_NO_FI"
    "RE_WITH_FOLLOW\020\202\001\022\035\n\030EC_YINGLING_MAX_EXP"
    "_FULL\020\203\001\022\035\n\030EC_YINGLING_CANNOT_OWNER\020\204\001\022"
    "\'\n\"EC_YINGLING_HIRE_NOT_ENOUGH_PIECES\020\205\001"
    "*\242\003\n\016SkillErrorCode\022\033\n\026EC_SKILL_NOT_IMPL"
    "EMENT\020\311\001\022\027\n\022EC_SKILL_NOT_FOUND\020\312\001\022\025\n\020EC_"
    "SKILL_INVALID\020\313\001\022\033\n\026EC_SKILL_SLOT_NOT_OP"
    "EN\020\314\001\022\027\n\022EC_ALREADY_LEARNED\020\315\001\022\035\n\030EC_SKI"
    "LL_LEVEL_NO_CONFIG\020\316\001\022\031\n\024EC_SKILL_LEVEL_"
    "LIMIT\020\317\001\022\033\n\026EC_SKILL_IN_PRACTICING\020\320\001\022\034\n"
    "\027EC_SKILL_CONFIG_INVALID\020\321\001\022\032\n\025EC_SKILL_"
    "TYPE_INVALID\020\322\001\022\032\n\025EC_SKILL_IS_MAX_LEVEL"
    "\020\323\001\022 \n\033EC_SKILL_PRACTICE_MAX_LIMIT\020\324\001\022%\n"
    " EC_SKILL_CANT_DROP_WHILE_EQUIPED\020\325\001\022\027\n\022"
    "EC_SKILL_NO_EFFECT\020\326\001*\307\r\n\rItemErrorCode\022"
    "\024\n\017EC_ITEM_SUCCESS\020\255\002\022\033\n\026EC_ITEM_INVALID"
    "_PLAYER\020\256\002\022\031\n\024EC_ITEM_INVALID_SHOP\020\257\002\022\031\n"
    "\024EC_ITEM_INVALID_ITEM\020\260\002\022\032\n\025EC_ITEM_INVA"
    "LID_COUNT\020\261\002\022\035\n\030EC_ITEM_INVALID_POSITION"
    "\020\262\002\022\034\n\027EC_ITEM_NO_ENOUGH_MONEY\020\263\002\022\027\n\022EC_"
    "ITEM_CANNOT_USE\020\264\002\022\033\n\026EC_ITEM_MISMATCHED"
    "_JOB\020\265\002\022\036\n\031EC_ITEM_MISMATCHED_GENDER\020\334\002\022"
    " \n\033EC_ITEM_MISMATCHED_POSITION\020\266\002\022\026\n\021EC_"
    "ITEM_NOT_FOUND\020\267\002\022\023\n\016EC_BAG_IS_FULL\020\270\002\022\036"
    "\n\031EC_ADD_ITEM_TO_BAG_FAILED\020\271\002\022%\n EC_SHE"
    "NGXING_NOT_FOUND_EQUIPMENT\020\272\002\022%\n EC_SHEN"
    "GXING_NOT_ENOUGH_MATERIAL\020\273\002\022\"\n\035EC_SHENG"
    "XING_NOT_ENOUGH_MONEY\020\274\002\022*\n%EC_SHENGXING"
    "_REACH_MAX_STRENGTH_LEVEL\020\275\002\022 \n\033EC_SHENG"
    "XING_UNSTRENGTHABLE\020\276\002\022\"\n\035EC_XILIAN_NOT_"
    "ENOUGH_MATERIAL\020\277\002\022\037\n\032EC_XILIAN_NOT_ENOU"
    "GH_MONEY\020\300\002\022\033\n\026EC_XILIAN_UNXILIANABLE\020\301\002"
    "\022\032\n\025EC_NO_MOVE_QUEST_ITEM\020\302\002\022\037\n\032EC_INHER"
    "IT_LEVEL_OUT_RANGE\020\305\002\022\"\n\035EC_INHERIT_EQUI"
    "P_POS_MISMATCH\020\306\002\022#\n\036EC_INHERIT_NOT_ENOU"
    "GH_MATERIAL\020\307\002\022\035\n\030EC_MAKE_SOCKET_REACH_M"
    "AX\020\312\002\022\033\n\026EC_NOT_ENOUGH_MATERIAL\020\313\002\022\033\n\026EC"
    "_GEM_NO_INSERT_EQUIP\020\314\002\022\033\n\026EC_PICKUP_NO_"
    "THIS_ITEM\020\317\002\022\035\n\030EC_PICKUP_ALREADY_PICKED"
    "\020\320\002\022\031\n\024EC_PICKUP_BE_PICKING\020\321\002\022%\n EC_ONL"
    "Y_LEADER_CAN_START_CRYSTAL\020\322\002\022+\n&EC_WING"
    "_SYSTEM_ENABLE_L4_ALREADY_OPEND\020\323\002\022(\n#EC"
    "_WING_SYSTEM_ENABLE_L4_NOT_ENOUGH\020\324\002\022 \n\033"
    "EC_WING_SYSTEM_LEVEL_DENIED\020\325\002\022$\n\037EC_WIN"
    "G_SYSTEM_SPIRIT_POOL_FULL\020\326\002\022#\n\036EC_WING_"
    "SYSTEM_SPIRIT_BAG_FULL\020\327\002\022(\n#EC_WING_SYS"
    "TEM_SPIRIT_CANNOT_PICKED\020\330\002\022(\n#EC_WING_S"
    "YSTEM_SPIRIT_MERGE_TOP_MAX\020\331\002\0227\n2EC_WING"
    "_SYSTEM_SPIRIT_EXCHANGE_NOT_ENOUGH_FRAGM"
    "ENT\020\332\002\022+\n&EC_WING_SYSTEM_SPIRIT_EQUIPT_S"
    "AME_ATTR\020\333\002\022\031\n\024EC_NOT_ENOUGH_SPIRIT\020\335\002\022\032"
    "\n\025EC_PRECIOUS_MERGE_MAX\020\336\002\022\031\n\024EC_PRECIOU"
    "S_REMAINED\020\337\002\022#\n\036EC_EQUIPMENT_EXTRA_ENHA"
    "NCEMENT\020\340\002\022\027\n\022EC_NOT_ENOUGH_ITEM\020\341\002\022\036\n\031E"
    "C_PRECIOUS_BATTLE_FAILED\020\342\002\022(\n#EC_PRECIO"
    "US_BATTLE_NO_ENOUGH_ENERGY\020\343\002\022\037\n\032EC_PREC"
    "IOUS_BATTLE_ALREADY\020\344\002\022\034\n\027EC_ITEM_IS_NOT"
    "_PRECIOUS\020\345\002\022\031\n\024EC_HAVE_OWN_YINGLING\020\346\002*"
    "\332\002\n\017LineupErrorCode\022\033\n\026EC_LINEUP_NAME_IN"
    "VALID\020\221\003\022\034\n\027EC_LINEUP_CREATE_FAILED\020\222\003\022\030"
    "\n\023EC_LINEUP_NOT_EXIST\020\223\003\022\032\n\025EC_LINEUP_ME"
    "MBER_FULL\020\224\003\022\033\n\026EC_LINEUP_NO_MAIN_ROLE\020\225"
    "\003\022\033\n\026EC_LINEUP_NUMBER_LIMIT\020\226\003\022\033\n\026EC_LIN"
    "EUP_MEMBER_LIMIT\020\227\003\022!\n\034EC_LINEUP_ONE_YIN"
    "GLING_LIMIT\020\230\003\022\037\n\032EC_LINEUP_TWO_YINGLING"
    "_MAX\020\231\003\022\034\n\027EC_CREATE_LINEUP_FAILED\020\232\003\022\035\n"
    "\030EC_LINEUP_INDEX_OVERFLOW\020\233\003*\220\002\n\016ArenaEr"
    "rorCode\022\031\n\024EC_SELF_RANK_CHANGED\020\365\003\022\036\n\031EC"
    "_CHALLEGEE_RANK_CHANGED\020\366\003\022\035\n\030EC_SNAP_PL"
    "AYER_NOT_FOUND\020\367\003\022\036\n\031EC_CHALLENGE_TIME_U"
    "SE_OUT\020\370\003\022\031\n\024EC_BOX_ALREADY_TAKEN\020\371\003\022%\n "
    "EC_ARENA_CHALLENGEE_IN_COOL_DOWN\020\372\003\022\035\n\030E"
    "C_CHALLENGE_LEVEL_LIMIT\020\373\003\022#\n\036EC_ARENA_C"
    "HALLENGEE_NOT_ENOUGH\020\374\003*\251\007\n\016QuestErrorCo"
    "de\022\036\n\031EC_QUEST_ALREADY_ACCEPTED\020\331\004\022\032\n\025EC"
    "_QUEST_NOT_ACCEPTED\020\332\004\022&\n!EC_QUEST_INVEN"
    "TORY_FULL_ON_ACCEPT\020\333\004\022%\n EC_QUEST_CONDI"
    "TION_NOT_SATISFIED\020\334\004\022#\n\036EC_QUEST_DAILY_"
    "STILL_COOL_DOWN\020\335\004\022#\n\036EC_QUEST_DAILY_QUE"
    "ST_NO_CANCEL\020\336\004\022,\n\'EC_QUEST_REFRESH_DAIL"
    "Y_QUEST_NO_YUANBAO\020\337\004\022&\n!EC_QUEST_REACH_"
    "MAX_PURCHASE_COUNT\020\340\004\022#\n\036EC_QUEST_REACH_"
    "MAX_DAILY_COUNT\020\341\004\022/\n*EC_QUEST_GENERATE_"
    "REACH_MAX_PURCHASE_COUNT\020\342\004\022,\n\'EC_QUEST_"
    "GENERATE_REACH_MAX_DAILY_COUNT\020\343\004\022,\n\'EC_"
    "QUEST_REACH_MAX_DAILY_ACCEPTED_COUNT\020\344\004\022"
    "\037\n\032EC_DAILY_QUEST_COUNT_LIMIT\020\345\004\022\034\n\027EC_D"
    "AILY_QUEST_COME_MAX\020\346\004\022\'\n\"EC_XUNLUO_QUES"
    "T_ACCEPT_NOT_IN_TEAM\020\347\004\022,\n\'EC_XUNLUO_QUE"
    "ST_ACCEPT_LESS_TEAM_MEMBER\020\350\004\022-\n(EC_XUNL"
    "UO_QUEST_ACCEPT_MEMBER_LEVEL_LESS\020\351\004\0221\n,"
    "EC_XUNLUO_QUEST_ACCEPT_MEMBER_ALREADY_AC"
    "CEPT\020\352\004\0221\n,EC_XUNLUO_QUEST_ACCEPT_MEMBER"
    "_STILL_COOLDOWN\020\353\004\022 \n\033EC_XUNLUO_QUEST_LI"
    "MIT_COUNT\020\354\004\022#\n\036EC_YOULI_RESET_MAP_NOT_A"
    "LLOWED\020\212\005\022#\n\036EC_YOULI_RESET_MAP_LIMIT_CO"
    "UNT\020\213\005\022#\n\036EC_QUEST_NOT_ENOUGH_QUEST_ITEM"
    "\020\214\005*\371\004\n\rTeamErrorCode\022\034\n\027EC_TEAM_INVALID"
    "_REQUEST\020\275\005\022\035\n\030EC_TEAM_NO_SUITABLE_TEAM\020"
    "\276\005\022\033\n\026EC_TEAM_PLAYER_IN_TEAM\020\277\005\022\034\n\027EC_TE"
    "AM_ALREADY_APPLIED\020\300\005\022\033\n\026EC_TEAM_PLAYER_"
    "OFFLINE\020\301\005\022\"\n\035EC_TEAM_PLAYER_IN_CUSTOM_P"
    "ASS\020\302\005\022\035\n\030EC_TEAM_PLAYER_NOT_EXIST\020\303\005\022\024\n"
    "\017EC_TEAM_IS_FULL\020\304\005\022\'\n\"EC_TEAM_PLAYER_LE"
    "VEL_NOT_SATISFIED\020\305\005\022\032\n\025EC_TEAM_CREATE_F"
    "AILED\020\306\005\022\026\n\021EC_TEAM_NOT_EXIST\020\307\005\022\026\n\021EC_T"
    "EAM_NO_LEADER\020\310\005\022\034\n\027EC_TEAM_INVITE_REJEC"
    "TED\020\311\005\022\036\n\031EC_TEAM_FIGHTER_NOT_FOUND\020\312\005\022\036"
    "\n\031EC_CANT_CHALLENGE_IN_TEAM\020\313\005\022\034\n\027EC_TEA"
    "M_NOT_AT_SAME_MAP\020\314\005\022$\n\037EC_TEAM_NOT_ALLO"
    "WED_IN_INSTANCE\020\315\005\022\037\n\032EC_TEAM_MEMBER_ACT"
    "ION_DENY\020\316\005\022\032\n\025EC_TEAM_GUILD_WAR_PVP\020\317\005\022"
    "&\n!EC_TEAM_CAMP_PVP_NOT_ALLOWED_TEAM\020\320\005*"
    "\342\010\n\016FightErrorCode\022\023\n\016EC_FIGHT_ERROR\020\241\006\022"
    "\032\n\025EC_DEFENDER_NOT_FOUND\020\242\006\022 \n\033EC_DEFEND"
    "ER_SKILL_NOT_FOUND\020\243\006\022\036\n\031EC_SKILL_HIT_TY"
    "PE_INVALID\020\244\006\022\034\n\027EC_SKILL_TARGET_INVALID"
    "\020\245\006\022\034\n\027EC_CHOOSE_COWORKER_FAIL\020\246\006\022!\n\034EC_"
    "PLAYER_FIGHT_IN_COOL_DOWN\020\247\006\022!\n\034EC_PLAYE"
    "R_NO_FREE_SKIP_FIGHT\020\250\006\022 \n\033EC_PLAYER_NOT"
    "_IN_AUTO_FIGHT\020\251\006\022\035\n\030EC_ALREADY_IN_AUTO_"
    "FIGHT\020\252\006\022\036\n\031EC_SCENE_AUTO_FIGHT_LIMIT\020\253\006"
    "\022$\n\037EC_SCENE_AUTO_FIGHT_LEVEL_LIMIT\020\254\006\022\035"
    "\n\030EC_TEAM_AUTO_FIGHT_LIMIT\020\255\006\022\"\n\035EC_AUTO"
    "_FIGHT_NO_ENOUGH_TIMES\020\256\006\022-\n(EC_SERVER_C"
    "REATE_AUTO_FIGHT_TIMER_FAILED\020\257\006\022*\n%EC_C"
    "ANT_JOIN_TEAM_WHILE_IN_AUTO_FIGHT\020\261\006\022\032\n\025"
    "EC_SPEED_UP_VIP_LIMIT\020\260\006\022%\n EC_BATTLE_GR"
    "OUP_CONFIG_NOT_FOUND\020\262\006\022$\n\037EC_ALIEN_BOSS"
    "_FIGHTER_NOT_FOUND\020\263\006\022\027\n\022EC_SENDER_IN_FI"
    "GHT\020\264\006\022\030\n\023EC_INVITEE_IN_FIGHT\020\265\006\022!\n\034EC_S"
    "ENDER_NOT_IN_FIGHT_SCENE\020\266\006\022\"\n\035EC_INVITE"
    "E_NOT_IN_FIGHT_SCENE\020\267\006\022%\n EC_TEAM_MEMBE"
    "R_CANT_INVITE_FIGHT\020\270\006\022\033\n\026EC_INVITEE_NO_"
    "RESPONSE\020\271\006\022\032\n\025EC_INVITEE_NOT_ONLINE\020\272\006\022"
    "%\n EC_TEAM_MEMBER_CANT_ACCEPT_FIGHT\020\273\006\022 "
    "\n\033EC_CANT_FIGHT_WITH_OWN_TEAM\020\274\006\022\037\n\032EC_G"
    "UILD_WAR_PVP_YOU_IN_CD\020\310\006\022!\n\034EC_GUILD_WA"
    "R_PVP_OTHER_IN_CD\020\311\006\022 \n\033EC_GUILD_WAR_PVP"
    "_SAME_GUILD\020\312\006\022$\n\037EC_FIGHT_TYPE_DIFF_MON"
    "STER_TYPE\020\313\006\022\036\n\031EC_OBJECT_PLAYER_IN_FIGH"
    "T\020\314\006*\303\001\n\rChatErrorCode\022\034\n\027EC_CHAT_INVALI"
    "D_CHANNEL\020\205\007\022\033\n\026EC_CHAT_INVALID_PLAYER\020\206"
    "\007\022\025\n\020EC_CHAT_TOO_FAST\020\207\007\022\025\n\020EC_CHAT_TOO_"
    "LONG\020\210\007\022\026\n\021EC_CHAT_BLACKLIST\020\211\007\022\036\n\031EC_CH"
    "AT_WORLD_LEVEL_LIMIT\020\212\007\022\021\n\014EC_CHAT_MUTE\020"
    "\213\007*\341\001\n\017FriendErrorCode\022\035\n\030EC_FRIEND_INVA"
    "LID_PLAYER\020\351\007\022\031\n\024EC_FRIEND_NOT_FRIEND\020\352\007"
    "\022\035\n\030EC_FRIEND_ALREADY_FRIEND\020\353\007\022\036\n\031EC_FR"
    "IEND_TOO_MANY_FRIEND\020\354\007\022\033\n\026EC_FRIEND_IN_"
    "BLACKLIST\020\355\007\022\023\n\016EC_FRIEND_DENY\020\356\007\022#\n\036EC_"
    "FRIEND_PEER_TOO_MANY_FRIEND\020\357\007*\356\t\n\016Guild"
    "ErrorCode\022%\n EC_GUILD_CREATE_LEVEL_NOT_E"
    "NOUGH\020\315\010\022\032\n\025EC_GUILD_INVALID_NAME\020\316\010\022\037\n\032"
    "EC_GUILD_NAME_LENGTH_LIMIT\020\317\010\022\023\n\016EC_GUIL"
    "D_EXIST\020\320\010\022\027\n\022EC_GUILD_NOT_EXIST\020\321\010\022\032\n\025E"
    "C_GUILD_MEMBER_EXIST\020\322\010\022\036\n\031EC_GUILD_MEMB"
    "ER_NOT_EXIST\020\323\010\022\035\n\030EC_GUILD_PERMISSION_D"
    "ENY\020\324\010\022\032\n\025EC_GUILD_IN_GUILD_WAR\020\370\010\022\033\n\026EC"
    "_CREATE_GUILD_FAILED\020\325\010\022&\n!EC_INVITE_MEM"
    "BER_ALREADY_IN_GUILD\020\326\010\022\036\n\031EC_GUILD_JOIN"
    "_LEVEL_LIMIT\020\327\010\022\031\n\024EC_GUILD_MEMBER_FULL\020"
    "\330\010\022\030\n\023EC_GUILD_TIME_LIMIT\020\331\010\022,\n\'EC_SKILL"
    "_LEVEL_GREAT_THAN_COLLEGE_LEVEL\020\332\010\022\"\n\035EC"
    "_RESEARCH_SKILL_COUNT_LIMIT\020\333\010\022$\n\037EC_GUI"
    "LD_SKILL_CONFIG_NOT_FOUND\020\334\010\022\034\n\027EC_GUILD"
    "_EXP_NOT_ENOUGH\020\335\010\022\036\n\031EC_GUILD_MONEY_NOT"
    "_ENOUGH\020\336\010\022\035\n\030EC_GUILD_SKILL_MAX_LEVEL\020\337"
    "\010\022\035\n\030EC_GUILD_SKILL_NOT_FOUND\020\340\010\022\"\n\035EC_G"
    "UILD_SKILL_IS_RESEARCHING\020\341\010\022\037\n\032EC_GUILD"
    "_COLLEGE_NOT_EXIST\020\342\010\022%\n EC_GUILD_CONTRI"
    "BUTION_NOT_ENOUGH\020\343\010\022\"\n\035EC_GUILD_BUILDIN"
    "G_GRADE_LIMIT\020\344\010\022\032\n\025EC_GUILD_NOT_IN_GUIL"
    "D\020\345\010\022\037\n\032EC_GUILD_NOT_IN_APPLY_LIST\020\346\010\022 \n"
    "\033EC_GUILD_NOT_IN_INVITE_LIST\020\347\010\022!\n\034EC_GU"
    "ILD_TEAM_NOT_ALL_MEMBER\020\350\010\022&\n!EC_GUILD_C"
    "RYSTAL_TOWER_TIME_LIMIT\020\351\010\022 \n\033EC_GUILD_L"
    "EARN_NOT_RESEARCH\020\352\010\022!\n\034EC_GUILD_LEARN_I"
    "NVALID_LEVEL\020\353\010\022$\n\037EC_GUILD_WAR_BOSS_NPC"
    "_NOT_FOUND\020\354\010\022$\n\037EC_GUILD_WAR_PVP_ENTER_"
    "NOT_OPEN\020\364\010\022+\n&EC_GUILD_WAR_PVP_ENTER_AL"
    "READY_STARTED\020\365\010\022#\n\036EC_GUILD_WAR_PVP_ENT"
    "ER_IN_TEAM\020\366\010\022(\n#EC_GUILD_WAR_PVP_ENTER_"
    "GUILD_NOT_IN\020\367\010*\367\014\n\rGiftErrorCode\022\035\n\030EC_"
    "INVALID_EXCHANGE_CODE\020\261\t\022\032\n\025EC_USED_EXCH"
    "ANGE_CODE\020\262\t\022#\n\036EC_ALREADY_EXCHANGED_THI"
    "S_TYPE\020\263\t\022\027\n\022EC_NO_GIFT_TO_TAKE\020\264\t\022\030\n\023EC"
    "_ACTIVITY_EXPIRED\020\265\t\022\031\n\024EC_ACTIVITY_NOT_"
    "OPEN\020\266\t\022\035\n\030EC_BOSS_ENCOURAGE_FAILED\020\267\t\022\026"
    "\n\021EC_BOSS_BUFF_FULL\020\270\t\022\032\n\025EC_BOSS_MAP_CA"
    "NT_TEAM\020\271\t\022\032\n\025EC_NO_LUCKY_TIME_LEFT\020\272\t\022\031"
    "\n\024EC_NO_ENOUGH_CREDITS\020\273\t\022%\n EC_ACT_NOT_"
    "ALLOWED_FROM_INSTANCE\020\274\t\022\"\n\035EC_ACT_NOT_A"
    "LLOWED_FROM_GUILD\020\275\t\022 \n\033EC_NO_MAP_BORN_P"
    "LACE_CONFIG\020\276\t\022\031\n\024EC_PVP_MAP_CANT_TEAM\020\277"
    "\t\022\037\n\032EC_PVP_PLAYER_IN_PROTECTED\020\300\t\022\036\n\031EC"
    "_PVP_PLAYER_IN_INSTANCE\020\301\t\022\035\n\030EC_PLAYER_"
    "NOT_IN_PVP_MAP\020\302\t\022\034\n\027EC_DEFENDER_LEVEL_L"
    "IMIT\020\303\t\022 \n\033EC_PVP_DEFENDER_IN_INSTANCE\020\304"
    "\t\022!\n\034EC_PVP_DEFENDER_IN_PROTECTED\020\305\t\022\037\n\032"
    "EC_DEFENDER_NOT_IN_PVP_MAP\020\306\t\022$\n\037EC_PLAY"
    "ER_NOT_IN_SAME_PVP_LEVEL\020\307\t\022 \n\033EC_PVP_LE"
    "VEL_DATA_NOT_FOUND\020\310\t\022 \n\033EC_PVP_ROBOT_LI"
    "NEUP_INVALID\020\311\t\022\025\n\020EC_PVP_TOP_LEVEL\020\312\t\022\034"
    "\n\027EC_PVP_NOT_IN_TOP_LEVEL\020\313\t\022\'\n\"EC_PVP_W"
    "INNER_BONUS_DATA_NOT_FOUND\020\314\t\022!\n\034EC_PVP_"
    "NOT_ALLOWED_FROM_BOSS\020\315\t\022!\n\034EC_BOSS_NOT_"
    "ALLOWED_FROM_PVP\020\316\t\022\'\n\"EC_GUILD_WAR_BOSS"
    "_DAMAGE_BUFF_FULL\020\317\t\022(\n#EC_GUILD_WAR_BOS"
    "S_DEFENCE_BUFF_FULL\020\320\t\022\032\n\025EC_ALREADY_TAK"
    "E_BONUS\020\321\t\022\034\n\027EC_TREASURE_BOX_TIMEOUT\020\322\t"
    "\022\033\n\026EC_GUILD_WAR_BOSS_DEAD\020\323\t\022&\n!EC_NO_T"
    "RANSPORT_DATA_CONFIG_FOUND\020\324\t\022 \n\033EC_IN_R"
    "E_ENTER_ACT_COOLDOWN\020\325\t\022\034\n\027EC_INVALID_TR"
    "ANSPORT_ID\020\326\t\022\'\n\"EC_PLAYER_NOT_IN_TIMESP"
    "ACE_ACT_MAP\020\327\t\022\027\n\022EC_BOSS_CANT_FIGHT\020\330\t\022"
    ")\n$EC_DEFENDER_NOT_IN_TIMESPACE_ACT_MAP\020"
    "\331\t\022$\n\037EC_MEMBER_NOT_ALLOWED_OPERATION\020\332\t"
    "\022*\n%EC_VIRTUAL_SPACE_LEVEL_INST_CANT_FIN"
    "D\020\333\t\022\037\n\032EC_ACT_NOT_ALLOWED_IN_TEAM\020\334\t\022!\n"
    "\034EC_NO_VIRTUAL_SPACE_TO_FIGHT\020\335\t\022\030\n\023EC_N"
    "O_ENOUGH_DEBRIS\020\336\t\022$\n\037EC_VIRTUAL_SPACE_A"
    "LREADY_PASSED\020\337\t\022!\n\034EC_LEVEL_LIMIT_IN_TI"
    "ME_SPACE\020\340\t\022\036\n\031EC_NO_OFFLINE_EXP_TO_TAKE"
    "\020\341\t\022\034\n\027EC_ACTIVITY_IS_OPENNING\020\342\t*s\n\021Liv"
    "enessErrorCode\022\036\n\031EC_LIVENESS_INVALID_AW"
    "ARD\020\343\t\022\034\n\027EC_LIVENESS_TAKEN_AWARD\020\344\t\022 \n\033"
    "EC_LIVENESS_CONDITION_LIMIT\020\345\t*\211\001\n\017Confi"
    "gErrorCode\022\037\n\032EC_CONFIG_DENY_TEAM_INVITE"
    "\020\201\n\022 \n\033EC_CONFIG_DENY_GUILD_INVITE\020\202\n\022\031\n"
    "\024EC_CONFIG_DENY_FIGHT\020\203\n\022\030\n\023EC_CONFIG_DE"
    "NY_TALK\020\204\n*\367\004\n\021InstanceErrorCode\022\037\n\032EC_I"
    "NSTANCE_TELEPORT_LIMIT\020\225\n\022\032\n\025EC_INSTANCE"
    "_NEED_TEAM\020\226\n\022\034\n\027EC_INSTANCE_NEED_SINGLE"
    "\020\227\n\022\034\n\027EC_INSTANCE_GRADE_LIMIT\020\230\n\022\036\n\031EC_"
    "NO_INSTANCE_DATA_FOUND\020\231\n\022%\n EC_INSTANCE"
    "_WANTED_DB_DATA_ERROR\020\232\n\022$\n\037EC_NO_INSTAN"
    "CE_WANTED_TIME_LEFT\020\233\n\022%\n EC_INSTANCE_CA"
    "RD_ALREADY_FLIPPED\020\234\n\022&\n!EC_NO_INSTANCE_"
    "WANTED_CONFIG_DATA\020\235\n\022)\n$EC_WRONG_INSTAN"
    "CE_WANTED_CONFIG_DATA\020\236\n\022\036\n\031EC_INSTANCE_"
    "USE_ITEM_DENY\020\237\n\022\037\n\032EC_NO_INSTANCE_CONFI"
    "G_DATA\020\240\n\022,\n\'EC_TEAM_INSTANCE_NOT_ALLOWE"
    "D_AUTO_FIGHT\020\241\n\022&\n!EC_ALREADY_IN_AUTO_FI"
    "GHT_INSTANCE\020\242\n\022*\n%EC_AUTO_FIGHT_INSTANC"
    "E_TIME_NOT_FOUND\020\243\n\022\"\n\035EC_NOT_IN_AUTO_IN"
    "STANCE_FIGHT\020\244\n\022\033\n\026EC_INSTANCE_NOT_PASSE"
    "D\020\245\n*\215\001\n\021PassTeamErrorCode\022\033\n\026EC_PASS_RO"
    "OM_NOT_EXIST\020\371\n\022\026\n\021EC_PASS_ROOM_FULL\020\372\n\022"
    "\032\n\025EC_NO_SUITE_PASS_ROOM\020\373\n\022\020\n\013EC_FAIL_P"
    "WD\020\374\n\022\025\n\020EC_NOT_ALL_READY\020\375\n*K\n\022BuddySou"
    "lErrorCode\022\035\n\030EC_NOT_ENOUGH_SOUL_STONE\020\334"
    "\013\022\026\n\021EC_MAX_SOUL_LEVEL\020\335\013*\225\001\n\rCampErrorC"
    "ode\022\017\n\nEC_NO_CAMP\020\347\013\022\022\n\rEC_WRONG_CAMP\020\350\013"
    "\022\032\n\025EC_ALREADY_JOIN_FIGHT\020\351\013\022\027\n\022EC_CAMP_"
    "BUFF_LIMIT\020\352\013\022\017\n\nEC_IN_TEAM\020\353\013\022\031\n\024EC_CON"
    "FLICT_ACTIVITY\020\354\013*Z\n\027ChargeActivityError"
    "Code\022\020\n\013EC_NOT_OPEN\020\360\013\022\027\n\022EC_INVALID_ITE"
    "M_ID\020\361\013\022\024\n\017EC_INVALID_TIME\020\362\013", 12789);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "error_code.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_error_5fcode_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_error_5fcode_2eproto {
  StaticDescriptorInitializer_error_5fcode_2eproto() {
    protobuf_AddDesc_error_5fcode_2eproto();
  }
} static_descriptor_initializer_error_5fcode_2eproto_;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorCode_descriptor_;
}
bool ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BuddyErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuddyErrorCode_descriptor_;
}
bool BuddyErrorCode_IsValid(int value) {
  switch(value) {
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SkillErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillErrorCode_descriptor_;
}
bool SkillErrorCode_IsValid(int value) {
  switch(value) {
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ItemErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemErrorCode_descriptor_;
}
bool ItemErrorCode_IsValid(int value) {
  switch(value) {
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 325:
    case 326:
    case 327:
    case 330:
    case 331:
    case 332:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 352:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LineupErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineupErrorCode_descriptor_;
}
bool LineupErrorCode_IsValid(int value) {
  switch(value) {
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 411:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ArenaErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaErrorCode_descriptor_;
}
bool ArenaErrorCode_IsValid(int value) {
  switch(value) {
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestErrorCode_descriptor_;
}
bool QuestErrorCode_IsValid(int value) {
  switch(value) {
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 608:
    case 609:
    case 610:
    case 611:
    case 612:
    case 613:
    case 614:
    case 615:
    case 616:
    case 617:
    case 618:
    case 619:
    case 620:
    case 650:
    case 651:
    case 652:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TeamErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamErrorCode_descriptor_;
}
bool TeamErrorCode_IsValid(int value) {
  switch(value) {
    case 701:
    case 702:
    case 703:
    case 704:
    case 705:
    case 706:
    case 707:
    case 708:
    case 709:
    case 710:
    case 711:
    case 712:
    case 713:
    case 714:
    case 715:
    case 716:
    case 717:
    case 718:
    case 719:
    case 720:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FightErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightErrorCode_descriptor_;
}
bool FightErrorCode_IsValid(int value) {
  switch(value) {
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
    case 807:
    case 808:
    case 809:
    case 810:
    case 811:
    case 812:
    case 813:
    case 814:
    case 815:
    case 816:
    case 817:
    case 818:
    case 819:
    case 820:
    case 821:
    case 822:
    case 823:
    case 824:
    case 825:
    case 826:
    case 827:
    case 828:
    case 840:
    case 841:
    case 842:
    case 843:
    case 844:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChatErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatErrorCode_descriptor_;
}
bool ChatErrorCode_IsValid(int value) {
  switch(value) {
    case 901:
    case 902:
    case 903:
    case 904:
    case 905:
    case 906:
    case 907:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FriendErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendErrorCode_descriptor_;
}
bool FriendErrorCode_IsValid(int value) {
  switch(value) {
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GuildErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildErrorCode_descriptor_;
}
bool GuildErrorCode_IsValid(int value) {
  switch(value) {
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1108:
    case 1109:
    case 1110:
    case 1111:
    case 1112:
    case 1113:
    case 1114:
    case 1115:
    case 1116:
    case 1117:
    case 1118:
    case 1119:
    case 1120:
    case 1121:
    case 1122:
    case 1123:
    case 1124:
    case 1125:
    case 1126:
    case 1127:
    case 1128:
    case 1129:
    case 1130:
    case 1131:
    case 1132:
    case 1140:
    case 1141:
    case 1142:
    case 1143:
    case 1144:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GiftErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GiftErrorCode_descriptor_;
}
bool GiftErrorCode_IsValid(int value) {
  switch(value) {
    case 1201:
    case 1202:
    case 1203:
    case 1204:
    case 1205:
    case 1206:
    case 1207:
    case 1208:
    case 1209:
    case 1210:
    case 1211:
    case 1212:
    case 1213:
    case 1214:
    case 1215:
    case 1216:
    case 1217:
    case 1218:
    case 1219:
    case 1220:
    case 1221:
    case 1222:
    case 1223:
    case 1224:
    case 1225:
    case 1226:
    case 1227:
    case 1228:
    case 1229:
    case 1230:
    case 1231:
    case 1232:
    case 1233:
    case 1234:
    case 1235:
    case 1236:
    case 1237:
    case 1238:
    case 1239:
    case 1240:
    case 1241:
    case 1242:
    case 1243:
    case 1244:
    case 1245:
    case 1246:
    case 1247:
    case 1248:
    case 1249:
    case 1250:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LivenessErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LivenessErrorCode_descriptor_;
}
bool LivenessErrorCode_IsValid(int value) {
  switch(value) {
    case 1251:
    case 1252:
    case 1253:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConfigErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigErrorCode_descriptor_;
}
bool ConfigErrorCode_IsValid(int value) {
  switch(value) {
    case 1281:
    case 1282:
    case 1283:
    case 1284:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* InstanceErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceErrorCode_descriptor_;
}
bool InstanceErrorCode_IsValid(int value) {
  switch(value) {
    case 1301:
    case 1302:
    case 1303:
    case 1304:
    case 1305:
    case 1306:
    case 1307:
    case 1308:
    case 1309:
    case 1310:
    case 1311:
    case 1312:
    case 1313:
    case 1314:
    case 1315:
    case 1316:
    case 1317:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PassTeamErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassTeamErrorCode_descriptor_;
}
bool PassTeamErrorCode_IsValid(int value) {
  switch(value) {
    case 1401:
    case 1402:
    case 1403:
    case 1404:
    case 1405:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BuddySoulErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuddySoulErrorCode_descriptor_;
}
bool BuddySoulErrorCode_IsValid(int value) {
  switch(value) {
    case 1500:
    case 1501:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CampErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampErrorCode_descriptor_;
}
bool CampErrorCode_IsValid(int value) {
  switch(value) {
    case 1511:
    case 1512:
    case 1513:
    case 1514:
    case 1515:
    case 1516:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChargeActivityErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeActivityErrorCode_descriptor_;
}
bool ChargeActivityErrorCode_IsValid(int value) {
  switch(value) {
    case 1520:
    case 1521:
    case 1522:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protocols

// @@protoc_insertion_point(global_scope)
