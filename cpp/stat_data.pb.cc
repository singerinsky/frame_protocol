// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stat_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocols {
namespace statistics {

namespace {

const ::google::protobuf::Descriptor* PlayerStatBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerStatBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipStrengthInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipStrengthInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_stat_5fdata_2eproto() {
  protobuf_AddDesc_stat_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "stat_data.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerStatBaseInfo_descriptor_ = file->message_type(0);
  static const int PlayerStatBaseInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStatBaseInfo, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStatBaseInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStatBaseInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStatBaseInfo, prof_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStatBaseInfo, cur_soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStatBaseInfo, max_soul_),
  };
  PlayerStatBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerStatBaseInfo_descriptor_,
      PlayerStatBaseInfo::default_instance_,
      PlayerStatBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStatBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStatBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerStatBaseInfo));
  EquipStrengthInfo_descriptor_ = file->message_type(1);
  static const int EquipStrengthInfo_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, helmet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, helmet_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, necklace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, necklace_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, shoulder_guards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, shoulder_guards_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, armor_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, waistband_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, waistband_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, weapon_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, assist_weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, assist_weapon_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, gloves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, gloves_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, wrist_band_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, wrist_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, ring_1_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, ring_1_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, ring_2_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, ring_2_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, shoes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, shoes_level_),
  };
  EquipStrengthInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipStrengthInfo_descriptor_,
      EquipStrengthInfo::default_instance_,
      EquipStrengthInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrengthInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipStrengthInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_stat_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerStatBaseInfo_descriptor_, &PlayerStatBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipStrengthInfo_descriptor_, &EquipStrengthInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_stat_5fdata_2eproto() {
  delete PlayerStatBaseInfo::default_instance_;
  delete PlayerStatBaseInfo_reflection_;
  delete EquipStrengthInfo::default_instance_;
  delete EquipStrengthInfo_reflection_;
}

void protobuf_AddDesc_stat_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protocols::common::protobuf_AddDesc_game_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017stat_data.proto\022\024protocols.statistics\032"
    "\021game_common.proto\"\224\001\n\022PlayerStatBaseInf"
    "o\022\022\n\007role_id\030\001 \002(\005:\0010\022\025\n\nprofession\030\002 \001("
    "\005:\0010\022\022\n\007quality\030\003 \001(\005:\0010\022\025\n\nprof_level\030\004"
    " \001(\005:\0010\022\023\n\010cur_soul\030\005 \001(\005:\0010\022\023\n\010max_soul"
    "\030\006 \001(\005:\0010\"\322\004\n\021EquipStrengthInfo\022\021\n\006helme"
    "t\030\001 \001(\005:\0010\022\027\n\014helmet_level\030\002 \001(\005:\0010\022\023\n\010n"
    "ecklace\030\003 \001(\005:\0010\022\031\n\016necklace_level\030\004 \001(\005"
    ":\0010\022\032\n\017shoulder_guards\030\007 \001(\005:\0010\022 \n\025shoul"
    "der_guards_level\030\010 \001(\005:\0010\022\020\n\005armor\030\t \001(\005"
    ":\0010\022\026\n\013armor_level\030\n \001(\005:\0010\022\024\n\twaistband"
    "\030\013 \001(\005:\0010\022\032\n\017waistband_level\030\014 \001(\005:\0010\022\021\n"
    "\006weapon\030\r \001(\005:\0010\022\027\n\014weapon_level\030\016 \001(\005:\001"
    "0\022\030\n\rassist_weapon\030\031 \001(\005:\0010\022\036\n\023assist_we"
    "apon_level\030\032 \001(\005:\0010\022\021\n\006gloves\030\017 \001(\005:\0010\022\027"
    "\n\014gloves_level\030\020 \001(\005:\0010\022\025\n\nwrist_band\030\021 "
    "\001(\005:\0010\022\026\n\013wrist_level\030\022 \001(\005:\0010\022\024\n\tring_1"
    "_id\030\023 \001(\005:\0010\022\027\n\014ring_1_level\030\024 \001(\005:\0010\022\024\n"
    "\tring_2_id\030\025 \001(\005:\0010\022\027\n\014ring_2_level\030\026 \001("
    "\005:\0010\022\020\n\005shoes\030\027 \001(\005:\0010\022\026\n\013shoes_level\030\030 "
    "\001(\005:\0010", 806);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stat_data.proto", &protobuf_RegisterTypes);
  PlayerStatBaseInfo::default_instance_ = new PlayerStatBaseInfo();
  EquipStrengthInfo::default_instance_ = new EquipStrengthInfo();
  PlayerStatBaseInfo::default_instance_->InitAsDefaultInstance();
  EquipStrengthInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_stat_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_stat_5fdata_2eproto {
  StaticDescriptorInitializer_stat_5fdata_2eproto() {
    protobuf_AddDesc_stat_5fdata_2eproto();
  }
} static_descriptor_initializer_stat_5fdata_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PlayerStatBaseInfo::kRoleIdFieldNumber;
const int PlayerStatBaseInfo::kProfessionFieldNumber;
const int PlayerStatBaseInfo::kQualityFieldNumber;
const int PlayerStatBaseInfo::kProfLevelFieldNumber;
const int PlayerStatBaseInfo::kCurSoulFieldNumber;
const int PlayerStatBaseInfo::kMaxSoulFieldNumber;
#endif  // !_MSC_VER

PlayerStatBaseInfo::PlayerStatBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerStatBaseInfo::InitAsDefaultInstance() {
}

PlayerStatBaseInfo::PlayerStatBaseInfo(const PlayerStatBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerStatBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0;
  profession_ = 0;
  quality_ = 0;
  prof_level_ = 0;
  cur_soul_ = 0;
  max_soul_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerStatBaseInfo::~PlayerStatBaseInfo() {
  SharedDtor();
}

void PlayerStatBaseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerStatBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerStatBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerStatBaseInfo_descriptor_;
}

const PlayerStatBaseInfo& PlayerStatBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stat_5fdata_2eproto();  return *default_instance_;
}

PlayerStatBaseInfo* PlayerStatBaseInfo::default_instance_ = NULL;

PlayerStatBaseInfo* PlayerStatBaseInfo::New() const {
  return new PlayerStatBaseInfo;
}

void PlayerStatBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0;
    profession_ = 0;
    quality_ = 0;
    prof_level_ = 0;
    cur_soul_ = 0;
    max_soul_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerStatBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 role_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_profession;
        break;
      }
      
      // optional int32 profession = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }
      
      // optional int32 quality = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prof_level;
        break;
      }
      
      // optional int32 prof_level = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_level_)));
          set_has_prof_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cur_soul;
        break;
      }
      
      // optional int32 cur_soul = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_soul_)));
          set_has_cur_soul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_soul;
        break;
      }
      
      // optional int32 max_soul = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_soul_)));
          set_has_max_soul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerStatBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 role_id = 1 [default = 0];
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role_id(), output);
  }
  
  // optional int32 profession = 2 [default = 0];
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->profession(), output);
  }
  
  // optional int32 quality = 3 [default = 0];
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }
  
  // optional int32 prof_level = 4 [default = 0];
  if (has_prof_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prof_level(), output);
  }
  
  // optional int32 cur_soul = 5 [default = 0];
  if (has_cur_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cur_soul(), output);
  }
  
  // optional int32 max_soul = 6 [default = 0];
  if (has_max_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_soul(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerStatBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 role_id = 1 [default = 0];
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->role_id(), target);
  }
  
  // optional int32 profession = 2 [default = 0];
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->profession(), target);
  }
  
  // optional int32 quality = 3 [default = 0];
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }
  
  // optional int32 prof_level = 4 [default = 0];
  if (has_prof_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prof_level(), target);
  }
  
  // optional int32 cur_soul = 5 [default = 0];
  if (has_cur_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cur_soul(), target);
  }
  
  // optional int32 max_soul = 6 [default = 0];
  if (has_max_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_soul(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerStatBaseInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 role_id = 1 [default = 0];
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }
    
    // optional int32 profession = 2 [default = 0];
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }
    
    // optional int32 quality = 3 [default = 0];
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }
    
    // optional int32 prof_level = 4 [default = 0];
    if (has_prof_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof_level());
    }
    
    // optional int32 cur_soul = 5 [default = 0];
    if (has_cur_soul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_soul());
    }
    
    // optional int32 max_soul = 6 [default = 0];
    if (has_max_soul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_soul());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerStatBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerStatBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerStatBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerStatBaseInfo::MergeFrom(const PlayerStatBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_prof_level()) {
      set_prof_level(from.prof_level());
    }
    if (from.has_cur_soul()) {
      set_cur_soul(from.cur_soul());
    }
    if (from.has_max_soul()) {
      set_max_soul(from.max_soul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerStatBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerStatBaseInfo::CopyFrom(const PlayerStatBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStatBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PlayerStatBaseInfo::Swap(PlayerStatBaseInfo* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(profession_, other->profession_);
    std::swap(quality_, other->quality_);
    std::swap(prof_level_, other->prof_level_);
    std::swap(cur_soul_, other->cur_soul_);
    std::swap(max_soul_, other->max_soul_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerStatBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerStatBaseInfo_descriptor_;
  metadata.reflection = PlayerStatBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipStrengthInfo::kHelmetFieldNumber;
const int EquipStrengthInfo::kHelmetLevelFieldNumber;
const int EquipStrengthInfo::kNecklaceFieldNumber;
const int EquipStrengthInfo::kNecklaceLevelFieldNumber;
const int EquipStrengthInfo::kShoulderGuardsFieldNumber;
const int EquipStrengthInfo::kShoulderGuardsLevelFieldNumber;
const int EquipStrengthInfo::kArmorFieldNumber;
const int EquipStrengthInfo::kArmorLevelFieldNumber;
const int EquipStrengthInfo::kWaistbandFieldNumber;
const int EquipStrengthInfo::kWaistbandLevelFieldNumber;
const int EquipStrengthInfo::kWeaponFieldNumber;
const int EquipStrengthInfo::kWeaponLevelFieldNumber;
const int EquipStrengthInfo::kAssistWeaponFieldNumber;
const int EquipStrengthInfo::kAssistWeaponLevelFieldNumber;
const int EquipStrengthInfo::kGlovesFieldNumber;
const int EquipStrengthInfo::kGlovesLevelFieldNumber;
const int EquipStrengthInfo::kWristBandFieldNumber;
const int EquipStrengthInfo::kWristLevelFieldNumber;
const int EquipStrengthInfo::kRing1IdFieldNumber;
const int EquipStrengthInfo::kRing1LevelFieldNumber;
const int EquipStrengthInfo::kRing2IdFieldNumber;
const int EquipStrengthInfo::kRing2LevelFieldNumber;
const int EquipStrengthInfo::kShoesFieldNumber;
const int EquipStrengthInfo::kShoesLevelFieldNumber;
#endif  // !_MSC_VER

EquipStrengthInfo::EquipStrengthInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipStrengthInfo::InitAsDefaultInstance() {
}

EquipStrengthInfo::EquipStrengthInfo(const EquipStrengthInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipStrengthInfo::SharedCtor() {
  _cached_size_ = 0;
  helmet_ = 0;
  helmet_level_ = 0;
  necklace_ = 0;
  necklace_level_ = 0;
  shoulder_guards_ = 0;
  shoulder_guards_level_ = 0;
  armor_ = 0;
  armor_level_ = 0;
  waistband_ = 0;
  waistband_level_ = 0;
  weapon_ = 0;
  weapon_level_ = 0;
  assist_weapon_ = 0;
  assist_weapon_level_ = 0;
  gloves_ = 0;
  gloves_level_ = 0;
  wrist_band_ = 0;
  wrist_level_ = 0;
  ring_1_id_ = 0;
  ring_1_level_ = 0;
  ring_2_id_ = 0;
  ring_2_level_ = 0;
  shoes_ = 0;
  shoes_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipStrengthInfo::~EquipStrengthInfo() {
  SharedDtor();
}

void EquipStrengthInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipStrengthInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipStrengthInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipStrengthInfo_descriptor_;
}

const EquipStrengthInfo& EquipStrengthInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stat_5fdata_2eproto();  return *default_instance_;
}

EquipStrengthInfo* EquipStrengthInfo::default_instance_ = NULL;

EquipStrengthInfo* EquipStrengthInfo::New() const {
  return new EquipStrengthInfo;
}

void EquipStrengthInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    helmet_ = 0;
    helmet_level_ = 0;
    necklace_ = 0;
    necklace_level_ = 0;
    shoulder_guards_ = 0;
    shoulder_guards_level_ = 0;
    armor_ = 0;
    armor_level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    waistband_ = 0;
    waistband_level_ = 0;
    weapon_ = 0;
    weapon_level_ = 0;
    assist_weapon_ = 0;
    assist_weapon_level_ = 0;
    gloves_ = 0;
    gloves_level_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    wrist_band_ = 0;
    wrist_level_ = 0;
    ring_1_id_ = 0;
    ring_1_level_ = 0;
    ring_2_id_ = 0;
    ring_2_level_ = 0;
    shoes_ = 0;
    shoes_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipStrengthInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 helmet = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helmet_)));
          set_has_helmet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_helmet_level;
        break;
      }
      
      // optional int32 helmet_level = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helmet_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helmet_level_)));
          set_has_helmet_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_necklace;
        break;
      }
      
      // optional int32 necklace = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_necklace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &necklace_)));
          set_has_necklace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_necklace_level;
        break;
      }
      
      // optional int32 necklace_level = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_necklace_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &necklace_level_)));
          set_has_necklace_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_shoulder_guards;
        break;
      }
      
      // optional int32 shoulder_guards = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoulder_guards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shoulder_guards_)));
          set_has_shoulder_guards();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_shoulder_guards_level;
        break;
      }
      
      // optional int32 shoulder_guards_level = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoulder_guards_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shoulder_guards_level_)));
          set_has_shoulder_guards_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_armor;
        break;
      }
      
      // optional int32 armor = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armor_)));
          set_has_armor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_armor_level;
        break;
      }
      
      // optional int32 armor_level = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armor_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armor_level_)));
          set_has_armor_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_waistband;
        break;
      }
      
      // optional int32 waistband = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_waistband:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waistband_)));
          set_has_waistband();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_waistband_level;
        break;
      }
      
      // optional int32 waistband_level = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_waistband_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waistband_level_)));
          set_has_waistband_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_weapon;
        break;
      }
      
      // optional int32 weapon = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_)));
          set_has_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_weapon_level;
        break;
      }
      
      // optional int32 weapon_level = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_level_)));
          set_has_weapon_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_gloves;
        break;
      }
      
      // optional int32 gloves = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gloves:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gloves_)));
          set_has_gloves();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_gloves_level;
        break;
      }
      
      // optional int32 gloves_level = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gloves_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gloves_level_)));
          set_has_gloves_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_wrist_band;
        break;
      }
      
      // optional int32 wrist_band = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wrist_band:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wrist_band_)));
          set_has_wrist_band();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_wrist_level;
        break;
      }
      
      // optional int32 wrist_level = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wrist_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wrist_level_)));
          set_has_wrist_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_ring_1_id;
        break;
      }
      
      // optional int32 ring_1_id = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ring_1_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ring_1_id_)));
          set_has_ring_1_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_ring_1_level;
        break;
      }
      
      // optional int32 ring_1_level = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ring_1_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ring_1_level_)));
          set_has_ring_1_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_ring_2_id;
        break;
      }
      
      // optional int32 ring_2_id = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ring_2_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ring_2_id_)));
          set_has_ring_2_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_ring_2_level;
        break;
      }
      
      // optional int32 ring_2_level = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ring_2_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ring_2_level_)));
          set_has_ring_2_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_shoes;
        break;
      }
      
      // optional int32 shoes = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shoes_)));
          set_has_shoes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_shoes_level;
        break;
      }
      
      // optional int32 shoes_level = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoes_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shoes_level_)));
          set_has_shoes_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_assist_weapon;
        break;
      }
      
      // optional int32 assist_weapon = 25 [default = 0];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assist_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assist_weapon_)));
          set_has_assist_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_assist_weapon_level;
        break;
      }
      
      // optional int32 assist_weapon_level = 26 [default = 0];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assist_weapon_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assist_weapon_level_)));
          set_has_assist_weapon_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipStrengthInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 helmet = 1 [default = 0];
  if (has_helmet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->helmet(), output);
  }
  
  // optional int32 helmet_level = 2 [default = 0];
  if (has_helmet_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->helmet_level(), output);
  }
  
  // optional int32 necklace = 3 [default = 0];
  if (has_necklace()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->necklace(), output);
  }
  
  // optional int32 necklace_level = 4 [default = 0];
  if (has_necklace_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->necklace_level(), output);
  }
  
  // optional int32 shoulder_guards = 7 [default = 0];
  if (has_shoulder_guards()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->shoulder_guards(), output);
  }
  
  // optional int32 shoulder_guards_level = 8 [default = 0];
  if (has_shoulder_guards_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->shoulder_guards_level(), output);
  }
  
  // optional int32 armor = 9 [default = 0];
  if (has_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->armor(), output);
  }
  
  // optional int32 armor_level = 10 [default = 0];
  if (has_armor_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->armor_level(), output);
  }
  
  // optional int32 waistband = 11 [default = 0];
  if (has_waistband()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->waistband(), output);
  }
  
  // optional int32 waistband_level = 12 [default = 0];
  if (has_waistband_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->waistband_level(), output);
  }
  
  // optional int32 weapon = 13 [default = 0];
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->weapon(), output);
  }
  
  // optional int32 weapon_level = 14 [default = 0];
  if (has_weapon_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->weapon_level(), output);
  }
  
  // optional int32 gloves = 15 [default = 0];
  if (has_gloves()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->gloves(), output);
  }
  
  // optional int32 gloves_level = 16 [default = 0];
  if (has_gloves_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->gloves_level(), output);
  }
  
  // optional int32 wrist_band = 17 [default = 0];
  if (has_wrist_band()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->wrist_band(), output);
  }
  
  // optional int32 wrist_level = 18 [default = 0];
  if (has_wrist_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->wrist_level(), output);
  }
  
  // optional int32 ring_1_id = 19 [default = 0];
  if (has_ring_1_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->ring_1_id(), output);
  }
  
  // optional int32 ring_1_level = 20 [default = 0];
  if (has_ring_1_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->ring_1_level(), output);
  }
  
  // optional int32 ring_2_id = 21 [default = 0];
  if (has_ring_2_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->ring_2_id(), output);
  }
  
  // optional int32 ring_2_level = 22 [default = 0];
  if (has_ring_2_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->ring_2_level(), output);
  }
  
  // optional int32 shoes = 23 [default = 0];
  if (has_shoes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->shoes(), output);
  }
  
  // optional int32 shoes_level = 24 [default = 0];
  if (has_shoes_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->shoes_level(), output);
  }
  
  // optional int32 assist_weapon = 25 [default = 0];
  if (has_assist_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->assist_weapon(), output);
  }
  
  // optional int32 assist_weapon_level = 26 [default = 0];
  if (has_assist_weapon_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->assist_weapon_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipStrengthInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 helmet = 1 [default = 0];
  if (has_helmet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->helmet(), target);
  }
  
  // optional int32 helmet_level = 2 [default = 0];
  if (has_helmet_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->helmet_level(), target);
  }
  
  // optional int32 necklace = 3 [default = 0];
  if (has_necklace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->necklace(), target);
  }
  
  // optional int32 necklace_level = 4 [default = 0];
  if (has_necklace_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->necklace_level(), target);
  }
  
  // optional int32 shoulder_guards = 7 [default = 0];
  if (has_shoulder_guards()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->shoulder_guards(), target);
  }
  
  // optional int32 shoulder_guards_level = 8 [default = 0];
  if (has_shoulder_guards_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->shoulder_guards_level(), target);
  }
  
  // optional int32 armor = 9 [default = 0];
  if (has_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->armor(), target);
  }
  
  // optional int32 armor_level = 10 [default = 0];
  if (has_armor_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->armor_level(), target);
  }
  
  // optional int32 waistband = 11 [default = 0];
  if (has_waistband()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->waistband(), target);
  }
  
  // optional int32 waistband_level = 12 [default = 0];
  if (has_waistband_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->waistband_level(), target);
  }
  
  // optional int32 weapon = 13 [default = 0];
  if (has_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->weapon(), target);
  }
  
  // optional int32 weapon_level = 14 [default = 0];
  if (has_weapon_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->weapon_level(), target);
  }
  
  // optional int32 gloves = 15 [default = 0];
  if (has_gloves()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->gloves(), target);
  }
  
  // optional int32 gloves_level = 16 [default = 0];
  if (has_gloves_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->gloves_level(), target);
  }
  
  // optional int32 wrist_band = 17 [default = 0];
  if (has_wrist_band()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->wrist_band(), target);
  }
  
  // optional int32 wrist_level = 18 [default = 0];
  if (has_wrist_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->wrist_level(), target);
  }
  
  // optional int32 ring_1_id = 19 [default = 0];
  if (has_ring_1_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->ring_1_id(), target);
  }
  
  // optional int32 ring_1_level = 20 [default = 0];
  if (has_ring_1_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->ring_1_level(), target);
  }
  
  // optional int32 ring_2_id = 21 [default = 0];
  if (has_ring_2_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->ring_2_id(), target);
  }
  
  // optional int32 ring_2_level = 22 [default = 0];
  if (has_ring_2_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->ring_2_level(), target);
  }
  
  // optional int32 shoes = 23 [default = 0];
  if (has_shoes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->shoes(), target);
  }
  
  // optional int32 shoes_level = 24 [default = 0];
  if (has_shoes_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->shoes_level(), target);
  }
  
  // optional int32 assist_weapon = 25 [default = 0];
  if (has_assist_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->assist_weapon(), target);
  }
  
  // optional int32 assist_weapon_level = 26 [default = 0];
  if (has_assist_weapon_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->assist_weapon_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipStrengthInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 helmet = 1 [default = 0];
    if (has_helmet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helmet());
    }
    
    // optional int32 helmet_level = 2 [default = 0];
    if (has_helmet_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helmet_level());
    }
    
    // optional int32 necklace = 3 [default = 0];
    if (has_necklace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->necklace());
    }
    
    // optional int32 necklace_level = 4 [default = 0];
    if (has_necklace_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->necklace_level());
    }
    
    // optional int32 shoulder_guards = 7 [default = 0];
    if (has_shoulder_guards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shoulder_guards());
    }
    
    // optional int32 shoulder_guards_level = 8 [default = 0];
    if (has_shoulder_guards_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shoulder_guards_level());
    }
    
    // optional int32 armor = 9 [default = 0];
    if (has_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armor());
    }
    
    // optional int32 armor_level = 10 [default = 0];
    if (has_armor_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armor_level());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 waistband = 11 [default = 0];
    if (has_waistband()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->waistband());
    }
    
    // optional int32 waistband_level = 12 [default = 0];
    if (has_waistband_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->waistband_level());
    }
    
    // optional int32 weapon = 13 [default = 0];
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon());
    }
    
    // optional int32 weapon_level = 14 [default = 0];
    if (has_weapon_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon_level());
    }
    
    // optional int32 assist_weapon = 25 [default = 0];
    if (has_assist_weapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assist_weapon());
    }
    
    // optional int32 assist_weapon_level = 26 [default = 0];
    if (has_assist_weapon_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assist_weapon_level());
    }
    
    // optional int32 gloves = 15 [default = 0];
    if (has_gloves()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gloves());
    }
    
    // optional int32 gloves_level = 16 [default = 0];
    if (has_gloves_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gloves_level());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 wrist_band = 17 [default = 0];
    if (has_wrist_band()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wrist_band());
    }
    
    // optional int32 wrist_level = 18 [default = 0];
    if (has_wrist_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wrist_level());
    }
    
    // optional int32 ring_1_id = 19 [default = 0];
    if (has_ring_1_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ring_1_id());
    }
    
    // optional int32 ring_1_level = 20 [default = 0];
    if (has_ring_1_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ring_1_level());
    }
    
    // optional int32 ring_2_id = 21 [default = 0];
    if (has_ring_2_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ring_2_id());
    }
    
    // optional int32 ring_2_level = 22 [default = 0];
    if (has_ring_2_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ring_2_level());
    }
    
    // optional int32 shoes = 23 [default = 0];
    if (has_shoes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shoes());
    }
    
    // optional int32 shoes_level = 24 [default = 0];
    if (has_shoes_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shoes_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipStrengthInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipStrengthInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipStrengthInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipStrengthInfo::MergeFrom(const EquipStrengthInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_helmet()) {
      set_helmet(from.helmet());
    }
    if (from.has_helmet_level()) {
      set_helmet_level(from.helmet_level());
    }
    if (from.has_necklace()) {
      set_necklace(from.necklace());
    }
    if (from.has_necklace_level()) {
      set_necklace_level(from.necklace_level());
    }
    if (from.has_shoulder_guards()) {
      set_shoulder_guards(from.shoulder_guards());
    }
    if (from.has_shoulder_guards_level()) {
      set_shoulder_guards_level(from.shoulder_guards_level());
    }
    if (from.has_armor()) {
      set_armor(from.armor());
    }
    if (from.has_armor_level()) {
      set_armor_level(from.armor_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_waistband()) {
      set_waistband(from.waistband());
    }
    if (from.has_waistband_level()) {
      set_waistband_level(from.waistband_level());
    }
    if (from.has_weapon()) {
      set_weapon(from.weapon());
    }
    if (from.has_weapon_level()) {
      set_weapon_level(from.weapon_level());
    }
    if (from.has_assist_weapon()) {
      set_assist_weapon(from.assist_weapon());
    }
    if (from.has_assist_weapon_level()) {
      set_assist_weapon_level(from.assist_weapon_level());
    }
    if (from.has_gloves()) {
      set_gloves(from.gloves());
    }
    if (from.has_gloves_level()) {
      set_gloves_level(from.gloves_level());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_wrist_band()) {
      set_wrist_band(from.wrist_band());
    }
    if (from.has_wrist_level()) {
      set_wrist_level(from.wrist_level());
    }
    if (from.has_ring_1_id()) {
      set_ring_1_id(from.ring_1_id());
    }
    if (from.has_ring_1_level()) {
      set_ring_1_level(from.ring_1_level());
    }
    if (from.has_ring_2_id()) {
      set_ring_2_id(from.ring_2_id());
    }
    if (from.has_ring_2_level()) {
      set_ring_2_level(from.ring_2_level());
    }
    if (from.has_shoes()) {
      set_shoes(from.shoes());
    }
    if (from.has_shoes_level()) {
      set_shoes_level(from.shoes_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipStrengthInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipStrengthInfo::CopyFrom(const EquipStrengthInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipStrengthInfo::IsInitialized() const {
  
  return true;
}

void EquipStrengthInfo::Swap(EquipStrengthInfo* other) {
  if (other != this) {
    std::swap(helmet_, other->helmet_);
    std::swap(helmet_level_, other->helmet_level_);
    std::swap(necklace_, other->necklace_);
    std::swap(necklace_level_, other->necklace_level_);
    std::swap(shoulder_guards_, other->shoulder_guards_);
    std::swap(shoulder_guards_level_, other->shoulder_guards_level_);
    std::swap(armor_, other->armor_);
    std::swap(armor_level_, other->armor_level_);
    std::swap(waistband_, other->waistband_);
    std::swap(waistband_level_, other->waistband_level_);
    std::swap(weapon_, other->weapon_);
    std::swap(weapon_level_, other->weapon_level_);
    std::swap(assist_weapon_, other->assist_weapon_);
    std::swap(assist_weapon_level_, other->assist_weapon_level_);
    std::swap(gloves_, other->gloves_);
    std::swap(gloves_level_, other->gloves_level_);
    std::swap(wrist_band_, other->wrist_band_);
    std::swap(wrist_level_, other->wrist_level_);
    std::swap(ring_1_id_, other->ring_1_id_);
    std::swap(ring_1_level_, other->ring_1_level_);
    std::swap(ring_2_id_, other->ring_2_id_);
    std::swap(ring_2_level_, other->ring_2_level_);
    std::swap(shoes_, other->shoes_);
    std::swap(shoes_level_, other->shoes_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipStrengthInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipStrengthInfo_descriptor_;
  metadata.reflection = EquipStrengthInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace statistics
}  // namespace protocols

// @@protoc_insertion_point(global_scope)
